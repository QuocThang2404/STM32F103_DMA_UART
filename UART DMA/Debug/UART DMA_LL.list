
UART DMA_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001fcc  08001fcc  00002fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fdc  08001fdc  00003018  2**0
                  CONTENTS
  4 .ARM          00000000  08001fdc  08001fdc  00003018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fdc  08001fdc  00003018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fdc  08001fdc  00002fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fe0  08001fe0  00002fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08001fe4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000018  08001ffc  00003018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001ffc  0000308c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008190  00000000  00000000  00003041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3a  00000000  00000000  0000b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0000cc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bf  00000000  00000000  0000d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f0  00000000  00000000  0000dbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fad  00000000  00000000  000255a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000876c6  00000000  00000000  0002f554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6c1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000234c  00000000  00000000  000b6c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000b8fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fb4 	.word	0x08001fb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001fb4 	.word	0x08001fb4

0800014c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000150:	4b04      	ldr	r3, [pc, #16]	@ (8000164 <LL_RCC_HSI_Enable+0x18>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a03      	ldr	r2, [pc, #12]	@ (8000164 <LL_RCC_HSI_Enable+0x18>)
 8000156:	f043 0301 	orr.w	r3, r3, #1
 800015a:	6013      	str	r3, [r2, #0]
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	40021000 	.word	0x40021000

08000168 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000168:	b480      	push	{r7}
 800016a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800016c:	4b06      	ldr	r3, [pc, #24]	@ (8000188 <LL_RCC_HSI_IsReady+0x20>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	f003 0302 	and.w	r3, r3, #2
 8000174:	2b02      	cmp	r3, #2
 8000176:	bf0c      	ite	eq
 8000178:	2301      	moveq	r3, #1
 800017a:	2300      	movne	r3, #0
 800017c:	b2db      	uxtb	r3, r3
}
 800017e:	4618      	mov	r0, r3
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	40021000 	.word	0x40021000

0800018c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000194:	4b06      	ldr	r3, [pc, #24]	@ (80001b0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	00db      	lsls	r3, r3, #3
 80001a0:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80001a2:	4313      	orrs	r3, r2
 80001a4:	600b      	str	r3, [r1, #0]
}
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	40021000 	.word	0x40021000

080001b4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80001bc:	4b06      	ldr	r3, [pc, #24]	@ (80001d8 <LL_RCC_SetSysClkSource+0x24>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	f023 0203 	bic.w	r2, r3, #3
 80001c4:	4904      	ldr	r1, [pc, #16]	@ (80001d8 <LL_RCC_SetSysClkSource+0x24>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	604b      	str	r3, [r1, #4]
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000

080001dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80001e0:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <LL_RCC_GetSysClkSource+0x14>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	f003 030c 	and.w	r3, r3, #12
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40021000 	.word	0x40021000

080001f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80001fc:	4b06      	ldr	r3, [pc, #24]	@ (8000218 <LL_RCC_SetAHBPrescaler+0x24>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000204:	4904      	ldr	r1, [pc, #16]	@ (8000218 <LL_RCC_SetAHBPrescaler+0x24>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4313      	orrs	r3, r2
 800020a:	604b      	str	r3, [r1, #4]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000

0800021c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800022c:	4904      	ldr	r1, [pc, #16]	@ (8000240 <LL_RCC_SetAPB1Prescaler+0x24>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4313      	orrs	r3, r2
 8000232:	604b      	str	r3, [r1, #4]
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000

08000244 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800024c:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <LL_RCC_SetAPB2Prescaler+0x24>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000254:	4904      	ldr	r1, [pc, #16]	@ (8000268 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4313      	orrs	r3, r2
 800025a:	604b      	str	r3, [r1, #4]
}
 800025c:	bf00      	nop
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000

0800026c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000270:	4b04      	ldr	r3, [pc, #16]	@ (8000284 <LL_RCC_PLL_Enable+0x18>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a03      	ldr	r2, [pc, #12]	@ (8000284 <LL_RCC_PLL_Enable+0x18>)
 8000276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800027a:	6013      	str	r3, [r2, #0]
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <LL_RCC_PLL_IsReady+0x20>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000298:	bf0c      	ite	eq
 800029a:	2301      	moveq	r3, #1
 800029c:	2300      	movne	r3, #0
 800029e:	b2db      	uxtb	r3, r3
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	40021000 	.word	0x40021000

080002ac <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80002b6:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	430b      	orrs	r3, r1
 80002c8:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80002ca:	4313      	orrs	r3, r2
 80002cc:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40021000 	.word	0x40021000

080002dc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002e6:	699a      	ldr	r2, [r3, #24]
 80002e8:	4907      	ldr	r1, [pc, #28]	@ (8000308 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	@ (8000308 <LL_APB2_GRP1_EnableClock+0x2c>)
 80002f2:	699a      	ldr	r2, [r3, #24]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40021000 	.word	0x40021000

0800030c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <LL_FLASH_SetLatency+0x24>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f023 0207 	bic.w	r2, r3, #7
 800031c:	4904      	ldr	r1, [pc, #16]	@ (8000330 <LL_FLASH_SetLatency+0x24>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4313      	orrs	r3, r2
 8000322:	600b      	str	r3, [r1, #0]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40022000 	.word	0x40022000

08000334 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000338:	4b03      	ldr	r3, [pc, #12]	@ (8000348 <LL_FLASH_GetLatency+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 0307 	and.w	r3, r3, #7
}
 8000340:	4618      	mov	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40022000 	.word	0x40022000

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000350:	f000 f984 	bl	800065c <HAL_Init>

  /* USER CODE BEGIN Init */
  configure_uart();
 8000354:	f001 fd1c 	bl	8001d90 <configure_uart>
  configure_dma();
 8000358:	f001 fd3c 	bl	8001dd4 <configure_dma>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f80c 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f000 f87a 	bl	8000458 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000364:	f000 f84e 	bl	8000404 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  start_transmission();
 8000368:	f001 fda8 	bl	8001ebc <start_transmission>
  start_receive();
 800036c:	f001 fdb6 	bl	8001edc <start_receive>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  transmit_data();
 8000370:	f001 fdc4 	bl	8001efc <transmit_data>
 8000374:	e7fc      	b.n	8000370 <main+0x24>
	...

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800037c:	2002      	movs	r0, #2
 800037e:	f7ff ffc5 	bl	800030c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000382:	bf00      	nop
 8000384:	f7ff ffd6 	bl	8000334 <LL_FLASH_GetLatency>
 8000388:	4603      	mov	r3, r0
 800038a:	2b02      	cmp	r3, #2
 800038c:	d1fa      	bne.n	8000384 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800038e:	2010      	movs	r0, #16
 8000390:	f7ff fefc 	bl	800018c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000394:	f7ff feda 	bl	800014c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000398:	bf00      	nop
 800039a:	f7ff fee5 	bl	8000168 <LL_RCC_HSI_IsReady>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d1fa      	bne.n	800039a <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 80003a4:	f44f 1160 	mov.w	r1, #3670016	@ 0x380000
 80003a8:	2000      	movs	r0, #0
 80003aa:	f7ff ff7f 	bl	80002ac <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80003ae:	f7ff ff5d 	bl	800026c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80003b2:	bf00      	nop
 80003b4:	f7ff ff68 	bl	8000288 <LL_RCC_PLL_IsReady>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d1fa      	bne.n	80003b4 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80003be:	2000      	movs	r0, #0
 80003c0:	f7ff ff18 	bl	80001f4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80003c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80003c8:	f7ff ff28 	bl	800021c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ff39 	bl	8000244 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80003d2:	2002      	movs	r0, #2
 80003d4:	f7ff feee 	bl	80001b4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80003d8:	bf00      	nop
 80003da:	f7ff feff 	bl	80001dc <LL_RCC_GetSysClkSource>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b08      	cmp	r3, #8
 80003e2:	d1fa      	bne.n	80003da <SystemClock_Config+0x62>
  {

  }
  LL_SetSystemCoreClock(64000000);
 80003e4:	4806      	ldr	r0, [pc, #24]	@ (8000400 <SystemClock_Config+0x88>)
 80003e6:	f001 fa39 	bl	800185c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80003ea:	200f      	movs	r0, #15
 80003ec:	f000 f94c 	bl	8000688 <HAL_InitTick>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003f6:	f000 f836 	bl	8000466 <Error_Handler>
  }
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	03d09000 	.word	0x03d09000

08000404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000408:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <MX_USART1_UART_Init+0x4c>)
 800040a:	4a12      	ldr	r2, [pc, #72]	@ (8000454 <MX_USART1_UART_Init+0x50>)
 800040c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800040e:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <MX_USART1_UART_Init+0x4c>)
 8000410:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000416:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <MX_USART1_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800041c:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <MX_USART1_UART_Init+0x4c>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000422:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <MX_USART1_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000428:	4b09      	ldr	r3, [pc, #36]	@ (8000450 <MX_USART1_UART_Init+0x4c>)
 800042a:	220c      	movs	r2, #12
 800042c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042e:	4b08      	ldr	r3, [pc, #32]	@ (8000450 <MX_USART1_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000434:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <MX_USART1_UART_Init+0x4c>)
 8000436:	2200      	movs	r2, #0
 8000438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800043a:	4805      	ldr	r0, [pc, #20]	@ (8000450 <MX_USART1_UART_Init+0x4c>)
 800043c:	f000 fcdc 	bl	8000df8 <HAL_UART_Init>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000446:	f000 f80e 	bl	8000466 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000034 	.word	0x20000034
 8000454:	40013800 	.word	0x40013800

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800045c:	2004      	movs	r0, #4
 800045e:	f7ff ff3d 	bl	80002dc <LL_APB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}

08000466 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046a:	b672      	cpsid	i
}
 800046c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046e:	bf00      	nop
 8000470:	e7fd      	b.n	800046e <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a14      	ldr	r2, [pc, #80]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a0e      	ldr	r2, [pc, #56]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004aa:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <HAL_MspInit+0x60>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	4a04      	ldr	r2, [pc, #16]	@ (80004d4 <HAL_MspInit+0x60>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010000 	.word	0x40010000

080004d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a20      	ldr	r2, [pc, #128]	@ (8000574 <HAL_UART_MspInit+0x9c>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d139      	bne.n	800056c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000578 <HAL_UART_MspInit+0xa0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a1e      	ldr	r2, [pc, #120]	@ (8000578 <HAL_UART_MspInit+0xa0>)
 80004fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <HAL_UART_MspInit+0xa0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b19      	ldr	r3, [pc, #100]	@ (8000578 <HAL_UART_MspInit+0xa0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a18      	ldr	r2, [pc, #96]	@ (8000578 <HAL_UART_MspInit+0xa0>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b16      	ldr	r3, [pc, #88]	@ (8000578 <HAL_UART_MspInit+0xa0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800052c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052e:	2302      	movs	r3, #2
 8000530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000532:	2303      	movs	r3, #3
 8000534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	480f      	ldr	r0, [pc, #60]	@ (800057c <HAL_UART_MspInit+0xa4>)
 800053e:	f000 faa5 	bl	8000a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	4809      	ldr	r0, [pc, #36]	@ (800057c <HAL_UART_MspInit+0xa4>)
 8000558:	f000 fa98 	bl	8000a8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2101      	movs	r1, #1
 8000560:	2025      	movs	r0, #37	@ 0x25
 8000562:	f000 f9aa 	bl	80008ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000566:	2025      	movs	r0, #37	@ 0x25
 8000568:	f000 f9c3 	bl	80008f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40013800 	.word	0x40013800
 8000578:	40021000 	.word	0x40021000
 800057c:	40010800 	.word	0x40010800

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <NMI_Handler+0x4>

08000588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <MemManage_Handler+0x4>

08000598 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout_uart != 0 ) timeout_uart--;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <SysTick_Handler+0x20>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d004      	beq.n	80005e2 <SysTick_Handler+0x16>
 80005d8:	4b04      	ldr	r3, [pc, #16]	@ (80005ec <SysTick_Handler+0x20>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a03      	ldr	r2, [pc, #12]	@ (80005ec <SysTick_Handler+0x20>)
 80005e0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e2:	f000 f881 	bl	80006e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000088 	.word	0x20000088

080005f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <USART1_IRQHandler+0x10>)
 80005f6:	f000 fc4f 	bl	8000e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000034 	.word	0x20000034

08000604 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000610:	f7ff fff8 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480b      	ldr	r0, [pc, #44]	@ (8000644 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000616:	490c      	ldr	r1, [pc, #48]	@ (8000648 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000618:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <LoopFillZerobss+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a09      	ldr	r2, [pc, #36]	@ (8000650 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800062c:	4c09      	ldr	r4, [pc, #36]	@ (8000654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063a:	f001 fc97 	bl	8001f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063e:	f7ff fe85 	bl	800034c <main>
  bx lr
 8000642:	4770      	bx	lr
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800064c:	08001fe4 	.word	0x08001fe4
  ldr r2, =_sbss
 8000650:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000654:	2000008c 	.word	0x2000008c

08000658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC1_2_IRQHandler>
	...

0800065c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000660:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <HAL_Init+0x28>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a07      	ldr	r2, [pc, #28]	@ (8000684 <HAL_Init+0x28>)
 8000666:	f043 0310 	orr.w	r3, r3, #16
 800066a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f919 	bl	80008a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000672:	200f      	movs	r0, #15
 8000674:	f000 f808 	bl	8000688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000678:	f7ff fefc 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40022000 	.word	0x40022000

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <HAL_InitTick+0x54>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <HAL_InitTick+0x58>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069e:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f931 	bl	800090e <HAL_SYSTICK_Config>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e00e      	b.n	80006d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	d80a      	bhi.n	80006d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006bc:	2200      	movs	r2, #0
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	f000 f8f9 	bl	80008ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c8:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <HAL_InitTick+0x5c>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ce:	2300      	movs	r3, #0
 80006d0:	e000      	b.n	80006d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000004 	.word	0x20000004

080006e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ec:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <HAL_IncTick+0x1c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_IncTick+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	4a03      	ldr	r2, [pc, #12]	@ (8000708 <HAL_IncTick+0x20>)
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	20000008 	.word	0x20000008
 8000708:	2000007c 	.word	0x2000007c

0800070c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800073c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073e:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	@ (800076c <__NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	db0b      	blt.n	800079a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 021f 	and.w	r2, r3, #31
 8000788:	4906      	ldr	r1, [pc, #24]	@ (80007a4 <__NVIC_EnableIRQ+0x34>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	2001      	movs	r0, #1
 8000792:	fa00 f202 	lsl.w	r2, r0, r2
 8000796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db0a      	blt.n	80007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	490c      	ldr	r1, [pc, #48]	@ (80007f4 <__NVIC_SetPriority+0x4c>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	440b      	add	r3, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d0:	e00a      	b.n	80007e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4908      	ldr	r1, [pc, #32]	@ (80007f8 <__NVIC_SetPriority+0x50>)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	3b04      	subs	r3, #4
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	761a      	strb	r2, [r3, #24]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	@ 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	f1c3 0307 	rsb	r3, r3, #7
 8000816:	2b04      	cmp	r3, #4
 8000818:	bf28      	it	cs
 800081a:	2304      	movcs	r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3304      	adds	r3, #4
 8000822:	2b06      	cmp	r3, #6
 8000824:	d902      	bls.n	800082c <NVIC_EncodePriority+0x30>
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3b03      	subs	r3, #3
 800082a:	e000      	b.n	800082e <NVIC_EncodePriority+0x32>
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	f04f 32ff 	mov.w	r2, #4294967295
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	401a      	ands	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000844:	f04f 31ff 	mov.w	r1, #4294967295
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43d9      	mvns	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	4313      	orrs	r3, r2
         );
}
 8000856:	4618      	mov	r0, r3
 8000858:	3724      	adds	r7, #36	@ 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000870:	d301      	bcc.n	8000876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2301      	movs	r3, #1
 8000874:	e00f      	b.n	8000896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <SysTick_Config+0x40>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087e:	210f      	movs	r1, #15
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f7ff ff90 	bl	80007a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <SysTick_Config+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <SysTick_Config+0x40>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff2d 	bl	800070c <__NVIC_SetPriorityGrouping>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008cc:	f7ff ff42 	bl	8000754 <__NVIC_GetPriorityGrouping>
 80008d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff90 	bl	80007fc <NVIC_EncodePriority>
 80008dc:	4602      	mov	r2, r0
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff5f 	bl	80007a8 <__NVIC_SetPriority>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff35 	bl	8000770 <__NVIC_EnableIRQ>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffa2 	bl	8000860 <SysTick_Config>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b02      	cmp	r3, #2
 800093c:	d008      	beq.n	8000950 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2204      	movs	r2, #4
 8000942:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e020      	b.n	8000992 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f022 020e 	bic.w	r2, r2, #14
 800095e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 0201 	bic.w	r2, r2, #1
 800096e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2201      	movs	r2, #1
 8000984:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000990:	7bfb      	ldrb	r3, [r7, #15]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d005      	beq.n	80009c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2204      	movs	r2, #4
 80009b8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e051      	b.n	8000a64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 020e 	bic.w	r2, r2, #14
 80009ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f022 0201 	bic.w	r2, r2, #1
 80009de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <HAL_DMA_Abort_IT+0xd4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d029      	beq.n	8000a3e <HAL_DMA_Abort_IT+0xa2>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a21      	ldr	r2, [pc, #132]	@ (8000a74 <HAL_DMA_Abort_IT+0xd8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d022      	beq.n	8000a3a <HAL_DMA_Abort_IT+0x9e>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <HAL_DMA_Abort_IT+0xdc>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d01a      	beq.n	8000a34 <HAL_DMA_Abort_IT+0x98>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1e      	ldr	r2, [pc, #120]	@ (8000a7c <HAL_DMA_Abort_IT+0xe0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d012      	beq.n	8000a2e <HAL_DMA_Abort_IT+0x92>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <HAL_DMA_Abort_IT+0xe4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00a      	beq.n	8000a28 <HAL_DMA_Abort_IT+0x8c>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1b      	ldr	r2, [pc, #108]	@ (8000a84 <HAL_DMA_Abort_IT+0xe8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d102      	bne.n	8000a22 <HAL_DMA_Abort_IT+0x86>
 8000a1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a20:	e00e      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a26:	e00b      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a2c:	e008      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a32:	e005      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a38:	e002      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	e000      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <HAL_DMA_Abort_IT+0xec>)
 8000a42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	4798      	blx	r3
    } 
  }
  return status;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020008 	.word	0x40020008
 8000a74:	4002001c 	.word	0x4002001c
 8000a78:	40020030 	.word	0x40020030
 8000a7c:	40020044 	.word	0x40020044
 8000a80:	40020058 	.word	0x40020058
 8000a84:	4002006c 	.word	0x4002006c
 8000a88:	40020000 	.word	0x40020000

08000a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b08b      	sub	sp, #44	@ 0x2c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9e:	e169      	b.n	8000d74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	f040 8158 	bne.w	8000d6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	4a9a      	ldr	r2, [pc, #616]	@ (8000d2c <HAL_GPIO_Init+0x2a0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d05e      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a98      	ldr	r2, [pc, #608]	@ (8000d2c <HAL_GPIO_Init+0x2a0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d875      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000ace:	4a98      	ldr	r2, [pc, #608]	@ (8000d30 <HAL_GPIO_Init+0x2a4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d058      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000ad4:	4a96      	ldr	r2, [pc, #600]	@ (8000d30 <HAL_GPIO_Init+0x2a4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d86f      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000ada:	4a96      	ldr	r2, [pc, #600]	@ (8000d34 <HAL_GPIO_Init+0x2a8>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d052      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000ae0:	4a94      	ldr	r2, [pc, #592]	@ (8000d34 <HAL_GPIO_Init+0x2a8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d869      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000ae6:	4a94      	ldr	r2, [pc, #592]	@ (8000d38 <HAL_GPIO_Init+0x2ac>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d04c      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000aec:	4a92      	ldr	r2, [pc, #584]	@ (8000d38 <HAL_GPIO_Init+0x2ac>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d863      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000af2:	4a92      	ldr	r2, [pc, #584]	@ (8000d3c <HAL_GPIO_Init+0x2b0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d046      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000af8:	4a90      	ldr	r2, [pc, #576]	@ (8000d3c <HAL_GPIO_Init+0x2b0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d85d      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d82a      	bhi.n	8000b58 <HAL_GPIO_Init+0xcc>
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d859      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000b06:	a201      	add	r2, pc, #4	@ (adr r2, 8000b0c <HAL_GPIO_Init+0x80>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b87 	.word	0x08000b87
 8000b10:	08000b61 	.word	0x08000b61
 8000b14:	08000b73 	.word	0x08000b73
 8000b18:	08000bb5 	.word	0x08000bb5
 8000b1c:	08000bbb 	.word	0x08000bbb
 8000b20:	08000bbb 	.word	0x08000bbb
 8000b24:	08000bbb 	.word	0x08000bbb
 8000b28:	08000bbb 	.word	0x08000bbb
 8000b2c:	08000bbb 	.word	0x08000bbb
 8000b30:	08000bbb 	.word	0x08000bbb
 8000b34:	08000bbb 	.word	0x08000bbb
 8000b38:	08000bbb 	.word	0x08000bbb
 8000b3c:	08000bbb 	.word	0x08000bbb
 8000b40:	08000bbb 	.word	0x08000bbb
 8000b44:	08000bbb 	.word	0x08000bbb
 8000b48:	08000bbb 	.word	0x08000bbb
 8000b4c:	08000bbb 	.word	0x08000bbb
 8000b50:	08000b69 	.word	0x08000b69
 8000b54:	08000b7d 	.word	0x08000b7d
 8000b58:	4a79      	ldr	r2, [pc, #484]	@ (8000d40 <HAL_GPIO_Init+0x2b4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5e:	e02c      	b.n	8000bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e029      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	623b      	str	r3, [r7, #32]
          break;
 8000b70:	e024      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	3308      	adds	r3, #8
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e01f      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	330c      	adds	r3, #12
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e01a      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	623b      	str	r3, [r7, #32]
          break;
 8000b92:	e013      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d105      	bne.n	8000ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	611a      	str	r2, [r3, #16]
          break;
 8000ba6:	e009      	b.n	8000bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	615a      	str	r2, [r3, #20]
          break;
 8000bb2:	e003      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
          break;
 8000bb8:	e000      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          break;
 8000bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d801      	bhi.n	8000bc6 <HAL_GPIO_Init+0x13a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	e001      	b.n	8000bca <HAL_GPIO_Init+0x13e>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	2bff      	cmp	r3, #255	@ 0xff
 8000bd0:	d802      	bhi.n	8000bd8 <HAL_GPIO_Init+0x14c>
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	e002      	b.n	8000bde <HAL_GPIO_Init+0x152>
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bda:	3b08      	subs	r3, #8
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	210f      	movs	r1, #15
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	401a      	ands	r2, r3
 8000bf0:	6a39      	ldr	r1, [r7, #32]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a4c      	ldr	r2, [pc, #304]	@ (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b4a      	ldr	r3, [pc, #296]	@ (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c24:	4a48      	ldr	r2, [pc, #288]	@ (8000d48 <HAL_GPIO_Init+0x2bc>)
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a40      	ldr	r2, [pc, #256]	@ (8000d4c <HAL_GPIO_Init+0x2c0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d013      	beq.n	8000c78 <HAL_GPIO_Init+0x1ec>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a3f      	ldr	r2, [pc, #252]	@ (8000d50 <HAL_GPIO_Init+0x2c4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d00d      	beq.n	8000c74 <HAL_GPIO_Init+0x1e8>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d54 <HAL_GPIO_Init+0x2c8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x1e4>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a3d      	ldr	r2, [pc, #244]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d101      	bne.n	8000c6c <HAL_GPIO_Init+0x1e0>
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	e004      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c7c:	f002 0203 	and.w	r2, r2, #3
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	4093      	lsls	r3, r2
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c8a:	492f      	ldr	r1, [pc, #188]	@ (8000d48 <HAL_GPIO_Init+0x2bc>)
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	492c      	ldr	r1, [pc, #176]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	608b      	str	r3, [r1, #8]
 8000cb0:	e006      	b.n	8000cc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	4928      	ldr	r1, [pc, #160]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ccc:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	4922      	ldr	r1, [pc, #136]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60cb      	str	r3, [r1, #12]
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	491e      	ldr	r1, [pc, #120]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d006      	beq.n	8000d02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4918      	ldr	r1, [pc, #96]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
 8000d00:	e006      	b.n	8000d10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4914      	ldr	r1, [pc, #80]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d021      	beq.n	8000d60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	490e      	ldr	r1, [pc, #56]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e021      	b.n	8000d6e <HAL_GPIO_Init+0x2e2>
 8000d2a:	bf00      	nop
 8000d2c:	10320000 	.word	0x10320000
 8000d30:	10310000 	.word	0x10310000
 8000d34:	10220000 	.word	0x10220000
 8000d38:	10210000 	.word	0x10210000
 8000d3c:	10120000 	.word	0x10120000
 8000d40:	10110000 	.word	0x10110000
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	40011000 	.word	0x40011000
 8000d58:	40011400 	.word	0x40011400
 8000d5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_GPIO_Init+0x304>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	4909      	ldr	r1, [pc, #36]	@ (8000d90 <HAL_GPIO_Init+0x304>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	3301      	adds	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f47f ae8e 	bne.w	8000aa0 <HAL_GPIO_Init+0x14>
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	372c      	adds	r7, #44	@ 0x2c
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d98:	4b02      	ldr	r3, [pc, #8]	@ (8000da4 <HAL_RCC_GetHCLKFreq+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20000000 	.word	0x20000000

08000da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000dac:	f7ff fff2 	bl	8000d94 <HAL_RCC_GetHCLKFreq>
 8000db0:	4602      	mov	r2, r0
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	4903      	ldr	r1, [pc, #12]	@ (8000dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dbe:	5ccb      	ldrb	r3, [r1, r3]
 8000dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	08001fcc 	.word	0x08001fcc

08000dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_RCC_GetHCLKFreq>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	0adb      	lsrs	r3, r3, #11
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	4903      	ldr	r1, [pc, #12]	@ (8000df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000de6:	5ccb      	ldrb	r3, [r1, r3]
 8000de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40021000 	.word	0x40021000
 8000df4:	08001fcc 	.word	0x08001fcc

08000df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e042      	b.n	8000e90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fb5a 	bl	80004d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2224      	movs	r2, #36	@ 0x24
 8000e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 fc7f 	bl	8001740 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	695a      	ldr	r2, [r3, #20]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2220      	movs	r2, #32
 8000e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8000eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8000ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10f      	bne.n	8000efe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d009      	beq.n	8000efe <HAL_UART_IRQHandler+0x66>
 8000eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000eee:	f003 0320 	and.w	r3, r3, #32
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fb63 	bl	80015c2 <UART_Receive_IT>
      return;
 8000efc:	e25b      	b.n	80013b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8000efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 80de 	beq.w	80010c4 <HAL_UART_IRQHandler+0x22c>
 8000f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d106      	bne.n	8000f22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80d1 	beq.w	80010c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_UART_IRQHandler+0xae>
 8000f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00b      	beq.n	8000f6a <HAL_UART_IRQHandler+0xd2>
 8000f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	f043 0202 	orr.w	r2, r3, #2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00b      	beq.n	8000f8e <HAL_UART_IRQHandler+0xf6>
 8000f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f043 0204 	orr.w	r2, r3, #4
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8000f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d011      	beq.n	8000fbe <HAL_UART_IRQHandler+0x126>
 8000f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d105      	bne.n	8000fb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8000fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f043 0208 	orr.w	r2, r3, #8
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 81f2 	beq.w	80013ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d008      	beq.n	8000fe6 <HAL_UART_IRQHandler+0x14e>
 8000fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000fd8:	f003 0320 	and.w	r3, r3, #32
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 faee 	bl	80015c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <HAL_UART_IRQHandler+0x17a>
 800100a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800100e:	2b00      	cmp	r3, #0
 8001010:	d04f      	beq.n	80010b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f9f8 	bl	8001408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001022:	2b00      	cmp	r3, #0
 8001024:	d041      	beq.n	80010aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	3314      	adds	r3, #20
 800102c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001030:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001034:	e853 3f00 	ldrex	r3, [r3]
 8001038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800103c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3314      	adds	r3, #20
 800104e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001052:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001056:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800105a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800105e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001062:	e841 2300 	strex	r3, r2, [r1]
 8001066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800106a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1d9      	bne.n	8001026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001076:	2b00      	cmp	r3, #0
 8001078:	d013      	beq.n	80010a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800107e:	4a7e      	ldr	r2, [pc, #504]	@ (8001278 <HAL_UART_IRQHandler+0x3e0>)
 8001080:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fc88 	bl	800099c <HAL_DMA_Abort_IT>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d016      	beq.n	80010c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800109c:	4610      	mov	r0, r2
 800109e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010a0:	e00e      	b.n	80010c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f99c 	bl	80013e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010a8:	e00a      	b.n	80010c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f998 	bl	80013e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010b0:	e006      	b.n	80010c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f994 	bl	80013e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80010be:	e175      	b.n	80013ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010c0:	bf00      	nop
    return;
 80010c2:	e173      	b.n	80013ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	f040 814f 	bne.w	800136c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80010ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8148 	beq.w	800136c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80010dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8141 	beq.w	800136c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80b6 	beq.w	800127c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800111c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 8145 	beq.w	80013b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800112a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800112e:	429a      	cmp	r2, r3
 8001130:	f080 813e 	bcs.w	80013b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800113a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b20      	cmp	r3, #32
 8001144:	f000 8088 	beq.w	8001258 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	330c      	adds	r3, #12
 800114e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001152:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001156:	e853 3f00 	ldrex	r3, [r3]
 800115a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800115e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001162:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001166:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	330c      	adds	r3, #12
 8001170:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001174:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001178:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800117c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001180:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001184:	e841 2300 	strex	r3, r2, [r1]
 8001188:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800118c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1d9      	bne.n	8001148 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3314      	adds	r3, #20
 800119a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800119c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800119e:	e853 3f00 	ldrex	r3, [r3]
 80011a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80011a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011a6:	f023 0301 	bic.w	r3, r3, #1
 80011aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3314      	adds	r3, #20
 80011b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80011b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80011bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80011c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80011c4:	e841 2300 	strex	r3, r2, [r1]
 80011c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80011ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1e1      	bne.n	8001194 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3314      	adds	r3, #20
 80011d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011da:	e853 3f00 	ldrex	r3, [r3]
 80011de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80011e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3314      	adds	r3, #20
 80011f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80011f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80011f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80011fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80011fc:	e841 2300 	strex	r3, r2, [r1]
 8001200:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001202:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1e3      	bne.n	80011d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2220      	movs	r2, #32
 800120c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	330c      	adds	r3, #12
 800121c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800121e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001220:	e853 3f00 	ldrex	r3, [r3]
 8001224:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001228:	f023 0310 	bic.w	r3, r3, #16
 800122c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	330c      	adds	r3, #12
 8001236:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800123a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800123c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800123e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001240:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001242:	e841 2300 	strex	r3, r2, [r1]
 8001246:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1e3      	bne.n	8001216 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fb67 	bl	8000926 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001266:	b29b      	uxth	r3, r3
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b29b      	uxth	r3, r3
 800126c:	4619      	mov	r1, r3
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f8bf 	bl	80013f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001274:	e09c      	b.n	80013b0 <HAL_UART_IRQHandler+0x518>
 8001276:	bf00      	nop
 8001278:	080014cd 	.word	0x080014cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001284:	b29b      	uxth	r3, r3
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001290:	b29b      	uxth	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 808e 	beq.w	80013b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 8089 	beq.w	80013b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	330c      	adds	r3, #12
 80012a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012ac:	e853 3f00 	ldrex	r3, [r3]
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80012b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	330c      	adds	r3, #12
 80012c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80012c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80012c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80012cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012ce:	e841 2300 	strex	r3, r2, [r1]
 80012d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80012d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e3      	bne.n	80012a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3314      	adds	r3, #20
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	e853 3f00 	ldrex	r3, [r3]
 80012e8:	623b      	str	r3, [r7, #32]
   return(result);
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3314      	adds	r3, #20
 80012fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001302:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001306:	e841 2300 	strex	r3, r2, [r1]
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800130c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1e3      	bne.n	80012da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2220      	movs	r2, #32
 8001316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	330c      	adds	r3, #12
 8001326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	e853 3f00 	ldrex	r3, [r3]
 800132e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 0310 	bic.w	r3, r3, #16
 8001336:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	330c      	adds	r3, #12
 8001340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001344:	61fa      	str	r2, [r7, #28]
 8001346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001348:	69b9      	ldr	r1, [r7, #24]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	e841 2300 	strex	r3, r2, [r1]
 8001350:	617b      	str	r3, [r7, #20]
   return(result);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1e3      	bne.n	8001320 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800135e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001362:	4619      	mov	r1, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f844 	bl	80013f2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800136a:	e023      	b.n	80013b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800136c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001374:	2b00      	cmp	r3, #0
 8001376:	d009      	beq.n	800138c <HAL_UART_IRQHandler+0x4f4>
 8001378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800137c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f8b5 	bl	80014f4 <UART_Transmit_IT>
    return;
 800138a:	e014      	b.n	80013b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800138c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00e      	beq.n	80013b6 <HAL_UART_IRQHandler+0x51e>
 8001398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800139c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d008      	beq.n	80013b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f8f4 	bl	8001592 <UART_EndTransmit_IT>
    return;
 80013aa:	e004      	b.n	80013b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80013ac:	bf00      	nop
 80013ae:	e002      	b.n	80013b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80013b0:	bf00      	nop
 80013b2:	e000      	b.n	80013b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80013b4:	bf00      	nop
  }
}
 80013b6:	37e8      	adds	r7, #232	@ 0xe8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001408:	b480      	push	{r7}
 800140a:	b095      	sub	sp, #84	@ 0x54
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	330c      	adds	r3, #12
 8001416:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800141a:	e853 3f00 	ldrex	r3, [r3]
 800141e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001422:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	330c      	adds	r3, #12
 800142e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001430:	643a      	str	r2, [r7, #64]	@ 0x40
 8001432:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001434:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001436:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001438:	e841 2300 	strex	r3, r2, [r1]
 800143c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800143e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e5      	bne.n	8001410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3314      	adds	r3, #20
 800144a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	e853 3f00 	ldrex	r3, [r3]
 8001452:	61fb      	str	r3, [r7, #28]
   return(result);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3314      	adds	r3, #20
 8001462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001464:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800146a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800146c:	e841 2300 	strex	r3, r2, [r1]
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e5      	bne.n	8001444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	2b01      	cmp	r3, #1
 800147e:	d119      	bne.n	80014b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	330c      	adds	r3, #12
 8001486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	e853 3f00 	ldrex	r3, [r3]
 800148e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f023 0310 	bic.w	r3, r3, #16
 8001496:	647b      	str	r3, [r7, #68]	@ 0x44
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	330c      	adds	r3, #12
 800149e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80014a0:	61ba      	str	r2, [r7, #24]
 80014a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014a4:	6979      	ldr	r1, [r7, #20]
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	e841 2300 	strex	r3, r2, [r1]
 80014ac:	613b      	str	r3, [r7, #16]
   return(result);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e5      	bne.n	8001480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80014c2:	bf00      	nop
 80014c4:	3754      	adds	r7, #84	@ 0x54
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ff7a 	bl	80013e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b21      	cmp	r3, #33	@ 0x21
 8001506:	d13e      	bne.n	8001586 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001510:	d114      	bne.n	800153c <UART_Transmit_IT+0x48>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d110      	bne.n	800153c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800152e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	1c9a      	adds	r2, r3, #2
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	621a      	str	r2, [r3, #32]
 800153a:	e008      	b.n	800154e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	1c59      	adds	r1, r3, #1
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6211      	str	r1, [r2, #32]
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29b      	uxth	r3, r3
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	4619      	mov	r1, r3
 800155c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10f      	bne.n	8001582 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001570:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001580:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001586:	2302      	movs	r3, #2
  }
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ff02 	bl	80013bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b08c      	sub	sp, #48	@ 0x30
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b22      	cmp	r3, #34	@ 0x22
 80015d4:	f040 80ae 	bne.w	8001734 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015e0:	d117      	bne.n	8001612 <UART_Receive_IT+0x50>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d113      	bne.n	8001612 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001600:	b29a      	uxth	r2, r3
 8001602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001604:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160a:	1c9a      	adds	r2, r3, #2
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001610:	e026      	b.n	8001660 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001624:	d007      	beq.n	8001636 <UART_Receive_IT+0x74>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10a      	bne.n	8001644 <UART_Receive_IT+0x82>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d106      	bne.n	8001644 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e008      	b.n	8001656 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001650:	b2da      	uxtb	r2, r3
 8001652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001654:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001664:	b29b      	uxth	r3, r3
 8001666:	3b01      	subs	r3, #1
 8001668:	b29b      	uxth	r3, r3
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4619      	mov	r1, r3
 800166e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001670:	2b00      	cmp	r3, #0
 8001672:	d15d      	bne.n	8001730 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0220 	bic.w	r2, r2, #32
 8001682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001692:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2220      	movs	r2, #32
 80016a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d135      	bne.n	8001726 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	330c      	adds	r3, #12
 80016c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	e853 3f00 	ldrex	r3, [r3]
 80016ce:	613b      	str	r3, [r7, #16]
   return(result);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f023 0310 	bic.w	r3, r3, #16
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	330c      	adds	r3, #12
 80016de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016e0:	623a      	str	r2, [r7, #32]
 80016e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016e4:	69f9      	ldr	r1, [r7, #28]
 80016e6:	6a3a      	ldr	r2, [r7, #32]
 80016e8:	e841 2300 	strex	r3, r2, [r1]
 80016ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e5      	bne.n	80016c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d10a      	bne.n	8001718 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800171c:	4619      	mov	r1, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff fe67 	bl	80013f2 <HAL_UARTEx_RxEventCallback>
 8001724:	e002      	b.n	800172c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fe51 	bl	80013ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	e002      	b.n	8001736 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001734:	2302      	movs	r3, #2
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	3730      	adds	r7, #48	@ 0x30
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	4313      	orrs	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800177a:	f023 030c 	bic.w	r3, r3, #12
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	430b      	orrs	r3, r1
 8001786:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699a      	ldr	r2, [r3, #24]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001854 <UART_SetConfig+0x114>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d103      	bne.n	80017b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017a8:	f7ff fb12 	bl	8000dd0 <HAL_RCC_GetPCLK2Freq>
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	e002      	b.n	80017b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80017b0:	f7ff fafa 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 80017b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009a      	lsls	r2, r3, #2
 80017c0:	441a      	add	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	4a22      	ldr	r2, [pc, #136]	@ (8001858 <UART_SetConfig+0x118>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	0119      	lsls	r1, r3, #4
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	009a      	lsls	r2, r3, #2
 80017e0:	441a      	add	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <UART_SetConfig+0x118>)
 80017ee:	fba3 0302 	umull	r0, r3, r3, r2
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2064      	movs	r0, #100	@ 0x64
 80017f6:	fb00 f303 	mul.w	r3, r0, r3
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	3332      	adds	r3, #50	@ 0x32
 8001800:	4a15      	ldr	r2, [pc, #84]	@ (8001858 <UART_SetConfig+0x118>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800180c:	4419      	add	r1, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	009a      	lsls	r2, r3, #2
 8001818:	441a      	add	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	fbb2 f2f3 	udiv	r2, r2, r3
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <UART_SetConfig+0x118>)
 8001826:	fba3 0302 	umull	r0, r3, r3, r2
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2064      	movs	r0, #100	@ 0x64
 800182e:	fb00 f303 	mul.w	r3, r0, r3
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	3332      	adds	r3, #50	@ 0x32
 8001838:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <UART_SetConfig+0x118>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	f003 020f 	and.w	r2, r3, #15
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	440a      	add	r2, r1
 800184a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40013800 	.word	0x40013800
 8001858:	51eb851f 	.word	0x51eb851f

0800185c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001864:	4a03      	ldr	r2, [pc, #12]	@ (8001874 <LL_SetSystemCoreClock+0x18>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	20000000 	.word	0x20000000

08001878 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	3b01      	subs	r3, #1
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <LL_DMA_EnableChannel+0x38>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	3a01      	subs	r2, #1
 8001896:	4906      	ldr	r1, [pc, #24]	@ (80018b0 <LL_DMA_EnableChannel+0x38>)
 8001898:	5c8a      	ldrb	r2, [r1, r2]
 800189a:	4611      	mov	r1, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	440a      	add	r2, r1
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	08001fd4 	.word	0x08001fd4

080018b4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	4a0c      	ldr	r2, [pc, #48]	@ (80018f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80018c6:	5cd3      	ldrb	r3, [r2, r3]
 80018c8:	461a      	mov	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80018d4:	f023 0310 	bic.w	r3, r3, #16
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	3a01      	subs	r2, #1
 80018dc:	4906      	ldr	r1, [pc, #24]	@ (80018f8 <LL_DMA_SetDataTransferDirection+0x44>)
 80018de:	5c8a      	ldrb	r2, [r1, r2]
 80018e0:	4611      	mov	r1, r2
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	440a      	add	r2, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	08001fd4 	.word	0x08001fd4

080018fc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	3b01      	subs	r3, #1
 800190c:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <LL_DMA_SetMode+0x40>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	461a      	mov	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4413      	add	r3, r2
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 0220 	bic.w	r2, r3, #32
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3b01      	subs	r3, #1
 8001920:	4906      	ldr	r1, [pc, #24]	@ (800193c <LL_DMA_SetMode+0x40>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	4619      	mov	r1, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	440b      	add	r3, r1
 800192a:	4619      	mov	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	08001fd4 	.word	0x08001fd4

08001940 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3b01      	subs	r3, #1
 8001950:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <LL_DMA_SetPeriphIncMode+0x40>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	461a      	mov	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	3b01      	subs	r3, #1
 8001964:	4906      	ldr	r1, [pc, #24]	@ (8001980 <LL_DMA_SetPeriphIncMode+0x40>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	4619      	mov	r1, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	440b      	add	r3, r1
 800196e:	4619      	mov	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	08001fd4 	.word	0x08001fd4

08001984 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	3b01      	subs	r3, #1
 8001994:	4a0b      	ldr	r2, [pc, #44]	@ (80019c4 <LL_DMA_SetMemoryIncMode+0x40>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	461a      	mov	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	4906      	ldr	r1, [pc, #24]	@ (80019c4 <LL_DMA_SetMemoryIncMode+0x40>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	4619      	mov	r1, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	440b      	add	r3, r1
 80019b2:	4619      	mov	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	08001fd4 	.word	0x08001fd4

080019c8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <LL_DMA_SetPeriphSize+0x40>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	461a      	mov	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	4906      	ldr	r1, [pc, #24]	@ (8001a08 <LL_DMA_SetPeriphSize+0x40>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	4619      	mov	r1, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	440b      	add	r3, r1
 80019f6:	4619      	mov	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	08001fd4 	.word	0x08001fd4

08001a0c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <LL_DMA_SetMemorySize+0x40>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	461a      	mov	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4413      	add	r3, r2
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	4906      	ldr	r1, [pc, #24]	@ (8001a4c <LL_DMA_SetMemorySize+0x40>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	4619      	mov	r1, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	440b      	add	r3, r1
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	08001fd4 	.word	0x08001fd4

08001a50 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	4a0b      	ldr	r2, [pc, #44]	@ (8001a90 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001a62:	5cd3      	ldrb	r3, [r2, r3]
 8001a64:	461a      	mov	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	4906      	ldr	r1, [pc, #24]	@ (8001a90 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	440b      	add	r3, r1
 8001a7e:	4619      	mov	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	08001fd4 	.word	0x08001fd4

08001a94 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <LL_DMA_SetDataLength+0x40>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	4906      	ldr	r1, [pc, #24]	@ (8001ad4 <LL_DMA_SetDataLength+0x40>)
 8001aba:	5c8a      	ldrb	r2, [r1, r2]
 8001abc:	4611      	mov	r1, r2
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	440a      	add	r2, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	08001fd4 	.word	0x08001fd4

08001ad8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	4a06      	ldr	r2, [pc, #24]	@ (8001b04 <LL_DMA_SetMemoryAddress+0x2c>)
 8001aea:	5cd3      	ldrb	r3, [r2, r3]
 8001aec:	461a      	mov	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	08001fd4 	.word	0x08001fd4

08001b08 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	4a06      	ldr	r2, [pc, #24]	@ (8001b34 <LL_DMA_SetPeriphAddress+0x2c>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6093      	str	r3, [r2, #8]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	08001fd4 	.word	0x08001fd4

08001b38 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	60da      	str	r2, [r3, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <LL_USART_SetParity>:
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	60da      	str	r2, [r3, #12]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <LL_USART_SetDataWidth>:
  *         @arg @ref LL_USART_DATAWIDTH_8B
  *         @arg @ref LL_USART_DATAWIDTH_9B
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	60da      	str	r2, [r3, #12]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	611a      	str	r2, [r3, #16]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	615a      	str	r2, [r3, #20]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
	...

08001be8 <LL_USART_SetBaudRate>:
  * @param  PeriphClk Peripheral Clock
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009a      	lsls	r2, r3, #2
 8001bfe:	441a      	add	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	4a25      	ldr	r2, [pc, #148]	@ (8001ca0 <LL_USART_SetBaudRate+0xb8>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	b299      	uxth	r1, r3
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009a      	lsls	r2, r3, #2
 8001c20:	441a      	add	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <LL_USART_SetBaudRate+0xb8>)
 8001c2c:	fba3 0302 	umull	r0, r3, r3, r2
 8001c30:	095b      	lsrs	r3, r3, #5
 8001c32:	2064      	movs	r0, #100	@ 0x64
 8001c34:	fb00 f303 	mul.w	r3, r0, r3
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	3332      	adds	r3, #50	@ 0x32
 8001c3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ca0 <LL_USART_SetBaudRate+0xb8>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	440b      	add	r3, r1
 8001c50:	b299      	uxth	r1, r3
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	009a      	lsls	r2, r3, #2
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <LL_USART_SetBaudRate+0xb8>)
 8001c68:	fba3 0302 	umull	r0, r3, r3, r2
 8001c6c:	095b      	lsrs	r3, r3, #5
 8001c6e:	2064      	movs	r0, #100	@ 0x64
 8001c70:	fb00 f303 	mul.w	r3, r0, r3
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	3332      	adds	r3, #50	@ 0x32
 8001c7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <LL_USART_SetBaudRate+0xb8>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	609a      	str	r2, [r3, #8]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	51eb851f 	.word	0x51eb851f

08001ca4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb4:	2b40      	cmp	r3, #64	@ 0x40
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd8:	2b80      	cmp	r3, #128	@ 0x80
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3314      	adds	r3, #20
 8001cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	e853 3f00 	ldrex	r3, [r3]
 8001d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	61ba      	str	r2, [r7, #24]
 8001d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d14:	6979      	ldr	r1, [r7, #20]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	e841 2300 	strex	r3, r2, [r1]
 8001d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1e7      	bne.n	8001cf4 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	@ 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3314      	adds	r3, #20
 8001d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	e853 3f00 	ldrex	r3, [r3]
 8001d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3314      	adds	r3, #20
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	61ba      	str	r2, [r7, #24]
 8001d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d58:	6979      	ldr	r1, [r7, #20]
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	e841 2300 	strex	r3, r2, [r1]
 8001d60:	613b      	str	r3, [r7, #16]
   return(result);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e7      	bne.n	8001d38 <LL_USART_EnableDMAReq_TX+0x8>
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	605a      	str	r2, [r3, #4]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <configure_uart>:
char txBuf[TXBUF_SIZE] = {'1', '2', '3', '4', '\0'};
char *p = txBuf;

uint32_t volatile timeout_uart = 0;

void configure_uart(void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    // Cấu hình UART (USART1)
    LL_USART_SetBaudRate(USART1, 64000000, 115200);
 8001d94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d98:	490c      	ldr	r1, [pc, #48]	@ (8001dcc <configure_uart+0x3c>)
 8001d9a:	480d      	ldr	r0, [pc, #52]	@ (8001dd0 <configure_uart+0x40>)
 8001d9c:	f7ff ff24 	bl	8001be8 <LL_USART_SetBaudRate>
    LL_USART_SetDataWidth(USART1, LL_USART_DATAWIDTH_8B);
 8001da0:	2100      	movs	r1, #0
 8001da2:	480b      	ldr	r0, [pc, #44]	@ (8001dd0 <configure_uart+0x40>)
 8001da4:	f7ff fee9 	bl	8001b7a <LL_USART_SetDataWidth>
    LL_USART_SetStopBitsLength(USART1, LL_USART_STOPBITS_1);
 8001da8:	2100      	movs	r1, #0
 8001daa:	4809      	ldr	r0, [pc, #36]	@ (8001dd0 <configure_uart+0x40>)
 8001dac:	f7ff fef7 	bl	8001b9e <LL_USART_SetStopBitsLength>
    LL_USART_SetParity(USART1, LL_USART_PARITY_NONE);
 8001db0:	2100      	movs	r1, #0
 8001db2:	4807      	ldr	r0, [pc, #28]	@ (8001dd0 <configure_uart+0x40>)
 8001db4:	f7ff fecf 	bl	8001b56 <LL_USART_SetParity>
    LL_USART_SetHWFlowCtrl(USART1, LL_USART_HWCONTROL_NONE);
 8001db8:	2100      	movs	r1, #0
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <configure_uart+0x40>)
 8001dbc:	f7ff ff01 	bl	8001bc2 <LL_USART_SetHWFlowCtrl>
    LL_USART_Enable(USART1);
 8001dc0:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <configure_uart+0x40>)
 8001dc2:	f7ff feb9 	bl	8001b38 <LL_USART_Enable>
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	03d09000 	.word	0x03d09000
 8001dd0:	40013800 	.word	0x40013800

08001dd4 <configure_dma>:

void configure_dma(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
    // Cấu hình DMA cho UART1 TX
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001dd8:	2210      	movs	r2, #16
 8001dda:	2104      	movs	r1, #4
 8001ddc:	4833      	ldr	r0, [pc, #204]	@ (8001eac <configure_dma+0xd8>)
 8001dde:	f7ff fd69 	bl	80018b4 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_4, (uint32_t)&USART1->DR);
 8001de2:	4a33      	ldr	r2, [pc, #204]	@ (8001eb0 <configure_dma+0xdc>)
 8001de4:	2104      	movs	r1, #4
 8001de6:	4831      	ldr	r0, [pc, #196]	@ (8001eac <configure_dma+0xd8>)
 8001de8:	f7ff fe8e 	bl	8001b08 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_4, (uint32_t)txBuf);
 8001dec:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <configure_dma+0xe0>)
 8001dee:	461a      	mov	r2, r3
 8001df0:	2104      	movs	r1, #4
 8001df2:	482e      	ldr	r0, [pc, #184]	@ (8001eac <configure_dma+0xd8>)
 8001df4:	f7ff fe70 	bl	8001ad8 <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, TXBUF_SIZE);
 8001df8:	2205      	movs	r2, #5
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	482b      	ldr	r0, [pc, #172]	@ (8001eac <configure_dma+0xd8>)
 8001dfe:	f7ff fe49 	bl	8001a94 <LL_DMA_SetDataLength>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_HIGH);
 8001e02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e06:	2104      	movs	r1, #4
 8001e08:	4828      	ldr	r0, [pc, #160]	@ (8001eac <configure_dma+0xd8>)
 8001e0a:	f7ff fe21 	bl	8001a50 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2104      	movs	r1, #4
 8001e12:	4826      	ldr	r0, [pc, #152]	@ (8001eac <configure_dma+0xd8>)
 8001e14:	f7ff fd72 	bl	80018fc <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	4823      	ldr	r0, [pc, #140]	@ (8001eac <configure_dma+0xd8>)
 8001e1e:	f7ff fd8f 	bl	8001940 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8001e22:	2280      	movs	r2, #128	@ 0x80
 8001e24:	2104      	movs	r1, #4
 8001e26:	4821      	ldr	r0, [pc, #132]	@ (8001eac <configure_dma+0xd8>)
 8001e28:	f7ff fdac 	bl	8001984 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2104      	movs	r1, #4
 8001e30:	481e      	ldr	r0, [pc, #120]	@ (8001eac <configure_dma+0xd8>)
 8001e32:	f7ff fdc9 	bl	80019c8 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2104      	movs	r1, #4
 8001e3a:	481c      	ldr	r0, [pc, #112]	@ (8001eac <configure_dma+0xd8>)
 8001e3c:	f7ff fde6 	bl	8001a0c <LL_DMA_SetMemorySize>

    // Cấu hình DMA cho UART1 RX
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2105      	movs	r1, #5
 8001e44:	4819      	ldr	r0, [pc, #100]	@ (8001eac <configure_dma+0xd8>)
 8001e46:	f7ff fd35 	bl	80018b4 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t)&USART1->DR);
 8001e4a:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <configure_dma+0xdc>)
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	4817      	ldr	r0, [pc, #92]	@ (8001eac <configure_dma+0xd8>)
 8001e50:	f7ff fe5a 	bl	8001b08 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t)rxBuf);
 8001e54:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <configure_dma+0xe4>)
 8001e56:	461a      	mov	r2, r3
 8001e58:	2105      	movs	r1, #5
 8001e5a:	4814      	ldr	r0, [pc, #80]	@ (8001eac <configure_dma+0xd8>)
 8001e5c:	f7ff fe3c 	bl	8001ad8 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, RXBUF_SIZE);
 8001e60:	2208      	movs	r2, #8
 8001e62:	2105      	movs	r1, #5
 8001e64:	4811      	ldr	r0, [pc, #68]	@ (8001eac <configure_dma+0xd8>)
 8001e66:	f7ff fe15 	bl	8001a94 <LL_DMA_SetDataLength>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_HIGH);
 8001e6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e6e:	2105      	movs	r1, #5
 8001e70:	480e      	ldr	r0, [pc, #56]	@ (8001eac <configure_dma+0xd8>)
 8001e72:	f7ff fded 	bl	8001a50 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	480c      	ldr	r0, [pc, #48]	@ (8001eac <configure_dma+0xd8>)
 8001e7c:	f7ff fd3e 	bl	80018fc <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2105      	movs	r1, #5
 8001e84:	4809      	ldr	r0, [pc, #36]	@ (8001eac <configure_dma+0xd8>)
 8001e86:	f7ff fd5b 	bl	8001940 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8001e8a:	2280      	movs	r2, #128	@ 0x80
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	4807      	ldr	r0, [pc, #28]	@ (8001eac <configure_dma+0xd8>)
 8001e90:	f7ff fd78 	bl	8001984 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2105      	movs	r1, #5
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <configure_dma+0xd8>)
 8001e9a:	f7ff fd95 	bl	80019c8 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2105      	movs	r1, #5
 8001ea2:	4802      	ldr	r0, [pc, #8]	@ (8001eac <configure_dma+0xd8>)
 8001ea4:	f7ff fdb2 	bl	8001a0c <LL_DMA_SetMemorySize>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40013804 	.word	0x40013804
 8001eb4:	2000000c 	.word	0x2000000c
 8001eb8:	20000080 	.word	0x20000080

08001ebc <start_transmission>:

void start_transmission(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
    // Bật UART DMA TX
    LL_USART_EnableDMAReq_TX(USART1);
 8001ec0:	4804      	ldr	r0, [pc, #16]	@ (8001ed4 <start_transmission+0x18>)
 8001ec2:	f7ff ff35 	bl	8001d30 <LL_USART_EnableDMAReq_TX>
    // Kích hoạt DMA
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	4803      	ldr	r0, [pc, #12]	@ (8001ed8 <start_transmission+0x1c>)
 8001eca:	f7ff fcd5 	bl	8001878 <LL_DMA_EnableChannel>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40013800 	.word	0x40013800
 8001ed8:	40020000 	.word	0x40020000

08001edc <start_receive>:

void start_receive(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
    // Bật UART DMA TX
    LL_USART_EnableDMAReq_RX(USART1);
 8001ee0:	4804      	ldr	r0, [pc, #16]	@ (8001ef4 <start_receive+0x18>)
 8001ee2:	f7ff ff03 	bl	8001cec <LL_USART_EnableDMAReq_RX>
    // Kích hoạt DMA
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8001ee6:	2105      	movs	r1, #5
 8001ee8:	4803      	ldr	r0, [pc, #12]	@ (8001ef8 <start_receive+0x1c>)
 8001eea:	f7ff fcc5 	bl	8001878 <LL_DMA_EnableChannel>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40020000 	.word	0x40020000

08001efc <transmit_data>:

void transmit_data(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
	while (*p)
 8001f00:	e023      	b.n	8001f4a <transmit_data+0x4e>
	{
		timeout_uart = 2000;
 8001f02:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <transmit_data+0x64>)
 8001f04:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f08:	601a      	str	r2, [r3, #0]
        while (!LL_USART_IsActiveFlag_TXE(USART1))
 8001f0a:	e003      	b.n	8001f14 <transmit_data+0x18>
        {
        	if (timeout_uart == 0) return;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <transmit_data+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <transmit_data+0x5a>
        while (!LL_USART_IsActiveFlag_TXE(USART1))
 8001f14:	4813      	ldr	r0, [pc, #76]	@ (8001f64 <transmit_data+0x68>)
 8001f16:	f7ff fed7 	bl	8001cc8 <LL_USART_IsActiveFlag_TXE>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f5      	beq.n	8001f0c <transmit_data+0x10>
        }

		LL_USART_TransmitData8( USART1, *p++);
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <transmit_data+0x6c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	4910      	ldr	r1, [pc, #64]	@ (8001f68 <transmit_data+0x6c>)
 8001f28:	600a      	str	r2, [r1, #0]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480d      	ldr	r0, [pc, #52]	@ (8001f64 <transmit_data+0x68>)
 8001f30:	f7ff ff20 	bl	8001d74 <LL_USART_TransmitData8>

		while (!LL_USART_IsActiveFlag_TC(USART1))
 8001f34:	e003      	b.n	8001f3e <transmit_data+0x42>
        {
			if (timeout_uart == 0) return;
 8001f36:	4b0a      	ldr	r3, [pc, #40]	@ (8001f60 <transmit_data+0x64>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00d      	beq.n	8001f5a <transmit_data+0x5e>
		while (!LL_USART_IsActiveFlag_TC(USART1))
 8001f3e:	4809      	ldr	r0, [pc, #36]	@ (8001f64 <transmit_data+0x68>)
 8001f40:	f7ff feb0 	bl	8001ca4 <LL_USART_IsActiveFlag_TC>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f5      	beq.n	8001f36 <transmit_data+0x3a>
	while (*p)
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <transmit_data+0x6c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1d6      	bne.n	8001f02 <transmit_data+0x6>
 8001f54:	e002      	b.n	8001f5c <transmit_data+0x60>
        	if (timeout_uart == 0) return;
 8001f56:	bf00      	nop
 8001f58:	e000      	b.n	8001f5c <transmit_data+0x60>
			if (timeout_uart == 0) return;
 8001f5a:	bf00      	nop
        }
	}
}
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000088 	.word	0x20000088
 8001f64:	40013800 	.word	0x40013800
 8001f68:	20000014 	.word	0x20000014

08001f6c <__libc_init_array>:
 8001f6c:	b570      	push	{r4, r5, r6, lr}
 8001f6e:	2600      	movs	r6, #0
 8001f70:	4d0c      	ldr	r5, [pc, #48]	@ (8001fa4 <__libc_init_array+0x38>)
 8001f72:	4c0d      	ldr	r4, [pc, #52]	@ (8001fa8 <__libc_init_array+0x3c>)
 8001f74:	1b64      	subs	r4, r4, r5
 8001f76:	10a4      	asrs	r4, r4, #2
 8001f78:	42a6      	cmp	r6, r4
 8001f7a:	d109      	bne.n	8001f90 <__libc_init_array+0x24>
 8001f7c:	f000 f81a 	bl	8001fb4 <_init>
 8001f80:	2600      	movs	r6, #0
 8001f82:	4d0a      	ldr	r5, [pc, #40]	@ (8001fac <__libc_init_array+0x40>)
 8001f84:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb0 <__libc_init_array+0x44>)
 8001f86:	1b64      	subs	r4, r4, r5
 8001f88:	10a4      	asrs	r4, r4, #2
 8001f8a:	42a6      	cmp	r6, r4
 8001f8c:	d105      	bne.n	8001f9a <__libc_init_array+0x2e>
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
 8001f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f94:	4798      	blx	r3
 8001f96:	3601      	adds	r6, #1
 8001f98:	e7ee      	b.n	8001f78 <__libc_init_array+0xc>
 8001f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f9e:	4798      	blx	r3
 8001fa0:	3601      	adds	r6, #1
 8001fa2:	e7f2      	b.n	8001f8a <__libc_init_array+0x1e>
 8001fa4:	08001fdc 	.word	0x08001fdc
 8001fa8:	08001fdc 	.word	0x08001fdc
 8001fac:	08001fdc 	.word	0x08001fdc
 8001fb0:	08001fe0 	.word	0x08001fe0

08001fb4 <_init>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr

08001fc0 <_fini>:
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	bf00      	nop
 8001fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc6:	bc08      	pop	{r3}
 8001fc8:	469e      	mov	lr, r3
 8001fca:	4770      	bx	lr
